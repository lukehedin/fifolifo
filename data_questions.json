{"questions":[{"id":1,"questionText":"What is ES6?","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["JavaScript","es6"],"answer":"ES6 is a new set of Javascript standards, enhancing the language and its capabilities.","enabled":false,"archived":false},{"id":2,"questionText":"What is an ES6 Map and what are its advantages?","questionCode":"","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["JavaScript","es6"],"answer":"An ES6 Map is an alternate way of holding a set key-value pairs. \n\nMaps can use objects, functions and arrays as keys. Maps also allow easy interaction with keys and values using properties (eg. .size) and iteration methods (eg.  for (let key of myMap.keys()) {}).","enabled":false,"archived":false},{"id":3,"questionText":"What is an ES6 Set and what are its advantages?","questionCode":"","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","es6"],"enabled":false,"answer":"An ES6 Set is an alternate way of holding a series of values.\n\nSets must have unique values, so they are particularly useful for distincting values in an array."},{"id":4,"questionText":"Write a function with some default parameters.","questionCode":"","difficulty":1,"codeResponse":true,"copyCode":false,"tags":["javascript","es6"],"enabled":true,"answer":"function multiply(number, multiplyBy = 10, optionalAdd = 0){\n\treturn (number * multiplyBy) + optionalAdd;\n};"},{"id":5,"questionText":"What is the JavaScript event loop?","questionCode":"","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","cs"],"enabled":true,"answer":"When the call stack is empty, the browser looks for the first thing on the task queue and then puts it onto the call stack. This is the event loop."},{"id":6,"questionText":"Rewrite the following using arrow syntax.","questionCode":"let area = function(length, width) {\n\treturn length * width;\n}","difficulty":1,"codeResponse":true,"copyCode":false,"tags":["javascript","es6"],"enabled":true,"answer":"let area = (length, width) => length * width;"},{"id":7,"questionText":"What is the difference between undefined and not defined in JavaScript?","questionCode":"","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"In JavaScript, if you try to use a variable that doesn’t exist and has not been declared, then JavaScript will throw an error var name is not defined and script will stop executing. However, if you use typeof undeclared_variable, then it will return undefined."},{"id":8,"questionText":"What will be the output of the code below?","questionCode":"var y = 1;\n if (function f(){}) {\n   y += typeof f;\n }\n console.log(y);","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"The output would be 1undefined\n\nThe if condition statement evaluates using eval, so eval(function f(){}) returns function f(){} (which is true). Therefore, inside the if statement, executing typeof f returns undefined because the if statement code executes at run time, and the statement inside the if condition is evaluated during run time."},{"id":9,"questionText":"What is the drawback of creating true private methods in JavaScript?","questionCode":"var Employee = function (name, company, salary) {\n    this.name = name || \"\";       //Public attribute default value is null\n    this.company = company || \"\"; //Public attribute default value is null\n    this.salary = salary || 5000; //Public attribute default value is null\n    // Private method\n    var increaseSalary = function () {\n        this.salary = this.salary + 1000;\n    };\n    // Public method\n    this.dispalyIncreasedSalary = function() {\n        increaseSlary();\n        console.log(this.salary);\n    };\n};","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"One of the drawbacks of creating true private methods in JavaScript is that they are very memory-inefficient, as a new copy of the method would be created for each instance."},{"id":10,"questionText":"What is a “closure” in JavaScript?","questionCode":"","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"A closure is a function defined inside another function (called the parent function), and has access to variables that are declared and defined in the parent function scope."},{"id":11,"questionText":"Write a mul function which will produce the following outputs when invoked:","questionCode":"console.log(mul(2)(3)(4)); // output : 24 \nconsole.log(mul(4)(3)(4)); // output : 48","difficulty":1,"codeResponse":true,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"function mul (x) {\n    return function (y) { // anonymous function \n        return function (z) { // anonymous function \n            return x * y * z; \n        };\n    };\n}\n\n// OR FOR FANCY ARROW FN\n\nlet mul = x => {\n\treturn y => {\n\t\treturn z => {\n\t\t\treturn x*y*z;\n\t\t}\n\t}\n}\n\n//Explanation\n\nHere the mul function accepts the first argument and returns an anonymous function, which takes the second parameter and returns another anonymous function that will take the third parameter and return the multiplication of the arguments that have been passed.\n\nIn JavaScript, a function defined inside another one has access to the outer function’s variables. Therefore, a function is a first-class object that can be returned by other functions as well and be passed as an argument in another function."},{"id":12,"questionText":"What is the difference between arrayList.length = 0; and arrayList = []?","questionCode":null,"difficulty":1,"codeResponse":true,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"arrayList.length = 0;\narrayList.splice(0, arrayList.length);\n\nThe code above will clear the existing array by setting its length to 0. This way of emptying the array also updates all the reference variables that point to the original array. Therefore, this method is useful when you want to update all reference variables pointing to arrayList.\n\n\narrayList = [];\n\nThis is recommended if you don’t have references to the original array arrayList anywhere else, because it will actually create a new, empty array. You should be careful with this method of emptying the array, because if you have referenced this array from another variable, then the original reference array will remain unchanged.\n\n\n"},{"id":13,"questionText":"How do you check if an object is an array or not?","questionCode":null,"difficulty":1,"codeResponse":true,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"Array.isArray(arrayList);\n"},{"id":14,"questionText":"What will be the output of the following code? Why?","questionCode":"var output = (function(x){\n    delete x;\n    return x;\n  })(0);\n  \n  console.log(output);","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"The output would be 0. \n\nThe delete operator is used to delete properties from an object. Here x is not an object but a local variable. delete operators don’t affect local variables."},{"id":15,"questionText":"What will be the output of the following code?","questionCode":"var x = 1;\nvar output = (function(){\n    delete x;\n    return x;\n  })();\n  \n  console.log(output);","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"The output would be 1. \n\nThe delete operator is used to delete the property of an object. Here x is not an object, but rather it’s the global variable of type number."},{"id":16,"questionText":"What will be the output of the code below?","questionCode":"var x = { foo : 1};\nvar output = (function(){\n    delete x.foo;\n    return x.foo;\n  })();\n  \n  console.log(output);\n","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"The output would be undefined. \n\n\nThe delete operator is used to delete the property of an object. Here, x is an object which has the property foo, and as it is a self-invoking function, we will delete the foo property from object x. After doing so, when we try to reference a deleted property foo, the result isundefined."},{"id":17,"questionText":"What will be the output of the code below?","questionCode":"var Employee = {\n  company: 'xyz'\n}\nvar emp1 = Object.create(Employee);\ndelete emp1.company\nconsole.log(emp1.company);","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"The output would be xyz. \n\nHere, emp1 object has company as its prototype property. The delete operator doesn’t delete prototype property.\n\nemp1 object doesn’t have company as its own property. You can test it console.log(emp1.hasOwnProperty('company')); //output : false. However, we can delete the company property directly from theEmployee object using delete Employee.company. Or, we can also delete the emp1 object using the __proto__ property delete emp1.__proto__.company."},{"id":18,"questionText":"What will be the output of the code below?","questionCode":"var trees = [\"xyz\",\"xxxx\",\"test\",\"ryan\",\"apple\"];\ndelete trees[3];\n  \n  console.log(trees.length);","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"The output would be 5. When we use the delete operator to delete an array element, the array length is not affected from this. This holds even if you deleted all elements of an array using the delete operator."},{"id":19,"questionText":"What will be the output of the code below?","questionCode":"var bar = true;\nconsole.log(bar + 0);   \nconsole.log(bar + \"xyz\");  \nconsole.log(bar + true);  \nconsole.log(bar + false);\n","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"The code will output 1, \"truexyz\", 2, 1. Here’s a general guideline for addition operators:\n\nNumber + Number -> Addition\nBoolean + Number -> Addition\nBoolean + Number -> Addition\nNumber + String -> Concatenation\nString + Boolean -> Concatenation\nString + String -> Concatenation"},{"id":20,"questionText":"What is undefined x 1 in JavaScript?","questionCode":"var trees = [\"redwood\",\"bay\",\"cedar\",\"oak\",\"maple\"];\ndelete trees[3];","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":false,"answer":"When you run the code above and type console.log(trees); into your Chrome developer console, you will get\n[\"redwood\", \"bay\", \"cedar\", undefined × 1, \"maple\"]. When you run the code in Firefox’s browser console, you will get [\"redwood\", \"bay\", \"cedar\", undefined, \"maple\"]. Thus, it’s clear that the Chrome browser has its own way of displaying uninitialised indexes in arrays. However, when you check trees[3] === undefined in both browsers, you will get similar output as true."},{"id":21,"questionText":"What will be the output of the code below?","questionCode":"var z = 1, y = z = typeof y;\nconsole.log(y);","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"The output would be undefined. \n\nAccording to the associativity rule, operators with the same precedence are processed based on the associativity property of the operator. Here, the associativity of the assignment operator is Right to Left, so typeof y will evaluate first , which is undefined. It will be assigned to z, and then y would be assigned the value of z and then z would be assigned the value 1."},{"id":22,"questionText":"What will be the output of the code below?","questionCode":"var foo = function bar(){ return 12; };\ntypeof bar();","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"The output would be Reference Error. To make the code above work, you can re-write it as follows:\n\nvar bar = function(){ return 12; };\ntypeof bar();\n\n//or\n\nfunction bar(){ return 12; };\ntypeof bar();\n\n\n//LH: The bar essentially gets lost entirely!"},{"id":23,"questionText":"What is difference between the function declarations below?","questionCode":"var foo = function(){ \n// Some code\n};\n\nfunction bar(){ \n// Some code\n};","difficulty":1,"codeResponse":true,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"The main difference is the function foo is defined at run-time whereas function bar is defined at parse time.\n\nfoo will not cause an error if it is specified twice, because it is read at run time\n\nbar WILL cause an error if it is specified twice because it is PARSED when the document reads it"},{"id":24,"questionText":"What is function hoisting in JavaScript?","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"In JavaScript, variable and functions are hoisted. Basically, the JavaScript interpreter looks ahead to find all variable declarations and then hoists them to the top of the function where they’re declared. "},{"id":25,"questionText":"What will be the output of code below?","questionCode":"var foo = \"foo\";\n(function () {\n    console.log(foo);\n    var foo = \"bar\";\n    console.log(foo);\n})();","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","js101"],"enabled":true,"answer":"The output would be undefined, bar. \n\nNewbies often get tricked by JavaScript’s hoisting concept. In the code above, you might be expecting foo to retain its value from the outer scope until the point that foo gets re-declared in the inner scope. However, due to hoisting, the foo value was undefined instead. "},{"id":26,"questionText":"Difference between function.call() and function.apply()?","questionCode":"","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript"],"enabled":true,"answer":"The difference is that apply lets you invoke the function with arguments as an array; call requires the parameters be listed explicitly.\n\ntheFunction.apply(undefined, [\"Susan\", \"school teacher\"]);\ntheFunction.call(undefined, \"Claude\", \"mathematician\");"},{"id":27,"questionText":"What sort of data binding does React use?","questionCode":"","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["react"],"enabled":true,"answer":"One-way data binding, the model (state) updates the view."},{"id":28,"questionText":"What is the instanceof operator in JavaScript? What would be the output of the code below?","questionCode":"function foo(){ \n\treturn foo; \n}\nnew foo() instanceof foo;","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript"],"enabled":true,"answer":"the new foo() instanceof foo return false;\n\nHere, instanceof operator checks the current object and returns true if the object is of the specified type.\n\n//EG\n\nvar dog = new Animal();\ndog instanceof Animal // Output : true\n\n//Here dog instanceof Animal is true since dog inherits from Animal.prototype.\n\n\nvar name = new String(\"xyz\");\nname instanceof String // Output : true\n\n//Here name instanceof String is true since dog inherits from String.prototype. \n"},{"id":29,"questionText":"How we will calculate length of the associative array counterArray?\nAn associative array is just another way of saying \"object\".","questionCode":"var counterArray = {\n\tA : 3,\n\tB : 4\n};\ncounterArray[\"C\"] = 1;\n","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript"],"enabled":true,"answer":"There are no in-built functions and properties available to calculate the length of associative array object here.\n\nHowever, Object has the keys method which can be used to calculate the length of an object:\n\nObject.keys(counterArray).length // Output 3\n"},{"id":30,"questionText":"What will be printed on the console?","questionCode":"(function() {\n   var a = b = 5;\n})();\n\nconsole.log(b);","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","5tjs"],"enabled":true,"answer":"The code above prints 5.\n\nThe trick of this question is that in the IIFE there are two assignments but the variable a is declared using the keyword var. What this means is that a is a local variable of the function. On the contrary, b is assigned to the global scope.\n\nThe other trick of this question is that it doesn’t use strict mode ('use strict';) inside the function. If strict mode was enabled, the code would raise the error Uncaught ReferenceError: b is not defined. Remember that strict mode requires you to explicitly reference to the global scope if this was the intended behavior."},{"id":31,"questionText":"Define a repeatify function on the String object. The function accepts an integer that specifies how many times the string has to be repeated. The function returns the string repeated the number of times specified. For example:","questionCode":"console.log('hello'.repeatify(3));\n\n//Should print hellohellohello","difficulty":1,"codeResponse":true,"copyCode":false,"tags":["javascript","5tjs"],"enabled":true,"answer":"String.prototype.repeatify = String.prototype.repeatify || function(times) {\n   var str = '';\n\n   for (var i = 0; i < times; i++) {\n      str += this;\n   }\n\n   return str;\n};"},{"id":32,"questionText":"What’s the result of executing this code and why.","questionCode":"function test() {\n   console.log(a);\n   console.log(foo());\n   \n   var a = 1;\n   function foo() {\n      return 2;\n   }\n}\n\ntest();","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","5tjs"],"enabled":true,"answer":"The result of this code is undefined and 2.\n\nThe reason is that both variables and functions are hoisted (moved at the top of the function) but variables don’t retain any assigned value. So, at the time the variable a is printed, it exists in the function (it’s declared) but it’s still undefined."},{"id":33,"questionText":"What is the result of the following code? Explain your answer.","questionCode":"var fullname = 'John Doe';\nvar obj = {\n   fullname: 'Colin Ihrig',\n   prop: {\n      fullname: 'Aurelio De Rosa',\n      getFullname: function() {\n         return this.fullname;\n      }\n   }\n};\n\nconsole.log(obj.prop.getFullname());\n\nvar test = obj.prop.getFullname;\n\nconsole.log(test());","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","5tjs"],"enabled":true,"answer":"The code prints Aurelio De Rosa and John Doe. \n\n\nThe reason is that the context of a function, what is referred with the this keyword, in JavaScript depends on how a function is invoked, not how it’s defined."},{"id":34,"questionText":"Fix this code so that the last console.log prints 'Nadir Patal'.","questionCode":"var fullname = 'Mike Brass';\nvar obj = {\n   fullname: 'Sarah Wool',\n   prop: {\n      fullname: 'Nadir Patal',\n      getFullname: function() {\n         return this.fullname;\n      }\n   }\n};\n\nconsole.log(obj.prop.getFullname());\n\nvar test = obj.prop.getFullname;\n\nconsole.log(test());","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript","5tjs"],"enabled":true,"answer":"The issue can be fixed by forcing the context of the function using either the call() or the apply() function. \n\nconsole.log(test.call(obj.prop));\n//I’ll use call() but in this case apply() would produce the same result:"},{"id":35,"questionText":"What is an anonymous function?","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript"],"enabled":true,"answer":"A function without a name eg.\n\nvar test = function(){ return 1; };\n//Anonymous\n\n\nfunction test(){ return 1};\n//Not anonymous"},{"id":36,"questionText":"What is the key difference between function hoisting and variable hoisting?","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript"],"enabled":true,"answer":"Unlike variables, a function declaration doesn't just hoist the function's name. It also hoists the actual function definition.\n\n// Outputs: \"Yes!\"\nisItHoisted();\n\nfunction isItHoisted() {\n    console.log(\"Yes!\");\n}\n\n\n//However, function definition hoisting only occurs for function declarations, not function expressions. \n\nfunction definitionHoisted() {\n    console.log(\"Definition hoisted!\");\n}\n\nvar definitionNotHoisted = function () {\n    console.log(\"Definition not hoisted!\");\n};"},{"id":37,"questionText":"Big O Notation: Explain O(1)","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo"],"enabled":true,"answer":"Describes an algorithm that will always execute in the same time (or space) regardless of the size of the input data set."},{"id":38,"questionText":"In Big O notation, how do we denote an algorithm that will always execute in the same time or space, regardless of input size?","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo"],"enabled":true,"answer":"O(1)"},{"id":39,"questionText":"Big O Notation: Explain O(n)","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo"],"enabled":true,"answer":"Describes an algorithm whose performance will grow linearly and in direct proportion to the size of the input data set."},{"id":40,"questionText":"Give a JavaScript example of an algorithm that could be represented with Big O notation of O(1).","questionCode":null,"difficulty":1,"codeResponse":true,"copyCode":false,"tags":["cs","bigo","javascript"],"enabled":true,"answer":"let isFirstItemNull = (array) => {\n\treturn array[0] === null;\n}"},{"id":41,"questionText":"In Big O notation, how do we denote an algorithm whose performance will grow linearly and in direct proportion to the size of the input data set?","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo"],"enabled":true,"answer":"O(n)"},{"id":42,"questionText":"Give a JavaScript example of an algorithm that could be represented with Big O notation of O(n).","questionCode":null,"difficulty":1,"codeResponse":true,"copyCode":false,"tags":["cs","bigo","javascript"],"enabled":true,"answer":"let containsSeven = (array) => {\n\tfor(let i = 0; i < array.length; i++){\n\t\tif(array[i] === 7) return true;\n\t}\n\treturn false;\n}\n\n\n//Important to note that 7 would have to be at the END of the array. Big O favours WORST case scenario"},{"id":43,"questionText":"Big O Notation: Explain O(n²)","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo"],"enabled":true,"answer":"Represents and algorithm whose performance is directly proportional to the square of the size of the input data set. This is common with algorithms that involve nested iterations over the data set. The deeper the iterations, the increase of the 'power to' value. O(n)^2, O(n)^3, O(n)^4..."},{"id":44,"questionText":"In Big O notation, how do we denote an algorithm whose performance is directly proportional to the square of the size of the input data set?","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo"],"enabled":true,"answer":"O(n²)"},{"id":45,"questionText":"Give a JavaScript example of an algorithm that could be represented with Big O notation of O(n²).","questionCode":null,"difficulty":1,"codeResponse":true,"copyCode":false,"tags":["cs","bigo","javascript"],"enabled":true,"answer":"let containsDuplicates = (array) => {\n\tfor(let i = 0; i < array.length; i++){\n\t\tfor(let b = 0; b < array.length; b++){\n\t\t\tif(i == b) continue;\n\t\t\tif(array[i] === array[b]) return true;\n\t\t}\n\t}\n\n\treturn false;\n}"},{"id":46,"questionText":"Big O Notation: Explain O(2ⁿ)","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo"],"enabled":true,"answer":"Denotes an algorithm whose growth doubles with each addition to the input data set. The growth curve of an O(2ⁿ) function is exponential, starting off very shallow, then rising meteorically. An example of an O(2ⁿ) function is the recursive calculation of Fibonacci numbers."},{"id":47,"questionText":"In Big O notation, how do we denote an algorithm whose growth doubles with each addition to the input data set?","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo"],"enabled":true,"answer":"O(2ⁿ)"},{"id":48,"questionText":"Give a JavaScript example of an algorithm that could be represented with Big O notation of O(2ⁿ).","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo","javascript"],"enabled":true,"answer":"let fibonacci = (number) => {\n\tif(number <= 1) return number;\n\treturn fibonacci(num - 2) + fibonacci(num - 1);\n}"},{"id":49,"questionText":"Order these Big O notations in order of dominance:\n\nO(log n)\nO(2ⁿ)\nO(n²)\nO(1)\nO(n)\nO(n log n)","questionCode":"","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo"],"enabled":true,"answer":"O(2ⁿ)\t\t// N exponential?! BOOM! Big!\nO(n²) \t\t// N to the power of a constant... big! \nO(n log n)\t// N by log reduced N... \nO(n)\t\t// N is big\nO(log n)\t// N is big but being reduced by log\nO(1)\t\t// Constant? meh"},{"id":50,"questionText":"What will the following code return?","questionCode":"\"hello\".split('');","difficulty":1,"codeResponse":true,"copyCode":false,"tags":["javascript"],"enabled":true,"answer":"[\"h\", \"e\", \"l\", \"l\", \"o\"]"},{"id":51,"questionText":"What will the following code return?","questionCode":"\"hello\".split();","difficulty":1,"codeResponse":true,"copyCode":false,"tags":["javascript"],"enabled":true,"answer":"\"hello\""},{"id":52,"questionText":"What will the following code return?","questionCode":"['h','e','l','l','o'].splice(5, 1)","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript"],"enabled":true,"answer":"[]"},{"id":53,"questionText":"What will the following code return?","questionCode":"['h','e','l','l','o'].splice(1, 1)","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript"],"enabled":true,"answer":"[\"e\"]"},{"id":54,"questionText":"What will be printed on the console?","questionCode":"(function() {\n   ('use strict';) \n   var a = b = 5;\n})();\n\nconsole.log(b);","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["javascript"],"enabled":true,"answer":"The code would raise the error Uncaught ReferenceError: b is not defined. \n\nRemember that strict mode requires you to explicitly reference to the global scope if this was the intended behavior."},{"id":55,"questionText":"What is the logarithm?\n\nlog","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo"],"enabled":true,"answer":"In mathematics, the logarithm is the inverse operation to exponentiation, just as division is the inverse of multiplication. \n\nThat means the logarithm of a number is the exponent to which another fixed number, the base, must be raised to produce that number."},{"id":56,"questionText":"O(n log n) or O(n²) - which would be considered a more efficient algorithm?","questionCode":"","difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo"],"enabled":true,"answer":"O(n log n)\n\n"},{"id":57,"questionText":"O(n log n) or O(n²) - which would be considered a less efficient algorithm?","questionCode":null,"difficulty":1,"codeResponse":false,"copyCode":false,"tags":["cs","bigo"],"enabled":true,"answer":"O(n²)\n\n\n"}]}